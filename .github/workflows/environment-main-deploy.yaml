name: Environment Main - Apply

on:
  push:
    branches:
    - main

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  envtest:
    name: Environment Main - Apply
    runs-on: ubuntu-latest
    environment: primary-rw
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Checkout code
      uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493

    - name: Set up Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '22'

    - name: Install esbuild
      run: npm install -g esbuild

    - name: Compile, check and test graphql
      run: IN_PIPELINE=true ENVIRONMENT=${{ vars.ENVIRONMENT }} make graphql

    - name: Test ui
      run: IN_PIPELINE=true ENVIRONMENT=${{ vars.ENVIRONMENT }} make ui-test

    - name: Run codacy-coverage-reporter
      uses: codacy/codacy-coverage-reporter-action@a38818475bb21847788496e9f0fddaa4e84955ba
      with:
        project-token: ${{ secrets.CODACY_API_TOKEN }}
        coverage-reports: graphql/coverage/lcov.info

    - name: Create weapon data file
      env:
        WEAPON_DATA: ${{ secrets.DELTAGREEN_WEAPONS_JSON }}
      run: |
        if [ -n "$WEAPON_DATA" ]; then
          echo "$WEAPON_DATA" > deltagreen-weapons.json
          echo "Created deltagreen-weapons.json from repository secret"
        else
          echo "No weapon data secret found, proceeding without weapon presets"
        fi

    - name: Configure AWS Access
      uses: aws-actions/configure-aws-credentials@0be22f94c34623c570f2c1479d3a28b5678673c7
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT }}:role/${{ vars.AWS_ROLE }}
        role-session-name: GitHubDeploy-${{ vars.ENVIRONMENT }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: terraform apply
      uses: dflook/terraform-apply@8f47d0ad9f3cb9e50fd6b3595c0cb98f00c518df
      id: terraform
      with:
        path: terraform/environment/wildsea
        variables: |
          environment="${{ vars.ENVIRONMENT }}"
          saml_metadata_url="${{ secrets.SAML_METADATA_URL }}"
          domain_name="${{ vars.DOMAIN_NAME }}"
          google_client_id="${{ secrets.GOOGLE_CLIENT_ID }}"
          google_client_secret="${{ secrets.GOOGLE_CLIENT_SECRET }}"
        backend_config:
          bucket=${{ vars.STATE_BUCKET }}
          key=${{ vars.ENVIRONMENT }}/terraform.tfstate
          region=${{ vars.AWS_REGION }}

    - name: write UI config file
      run: |
        echo '${{ toJSON(steps.terraform.outputs) }}' | jq 'with_entries(.value = {value: .value})' > ui/config/output-${{ vars.ENVIRONMENT }}.json

    - name: Push UI
      run: |
        IN_PIPELINE=true ENVIRONMENT=${{ vars.ENVIRONMENT }} make ui/.push-${{ vars.ENVIRONMENT }}
